from redis import asyncio as aioredis
from app.config import settings
from app.logger import logger

redis_connection = None


async def init_redis_revoke_tokens():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    global redis_connection
    try:
        redis_connection = await aioredis.from_url(
            settings.REDIS_URL_REVOKE_TOKENS, decode_responses=True
        )
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis REVOKE TOKENS")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis REVOKE TOKENS: {e}")
        redis_connection = None  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    return redis_connection


async def close_redis_revoke_tokens():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    global redis_connection
    if redis_connection:
        try:
            await redis_connection.close()
            logger.info("üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis REVOKE TOKENS –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis –¥–ª—è –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")


async def revoke_token(token: str, ex: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –±–ª–æ–∫-–ª–∏—Å—Ç (—Ä–µ–≤–æ–∫–∞—Ü–∏—è)."""
    if not redis_connection:
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–ª–æ–∫-–ª–∏—Å—Ç –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Redis.")
        raise Exception("Redis is not initialized. Call init_redis_revoke_tokens() first.")

    try:
        await redis_connection.set(name=token, value="1", ex=ex * 60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token} –≤ –±–ª–æ–∫-–ª–∏—Å—Ç: {e}")


async def is_token_revoked(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ."""
    if not redis_connection:
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Redis.")
        raise Exception("Redis is not initialized. Call init_redis_revoke_tokens() first.")

    try:
        revoked = await redis_connection.exists(token) > 0
        return revoked
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ {token} –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ: {e}")
        return False