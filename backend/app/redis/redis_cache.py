from redis import asyncio as aioredis
from app.config import settings
from app.logger import logger

redis_connection = None


async def init_redis_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis-–∫—ç—à—É."""
    global redis_connection
    try:
        redis_connection = await aioredis.from_url(settings.REDIS_URL_CACHE)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis CACHE")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis CACHE: {e}")
        redis_connection = None  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    return redis_connection


async def close_redis_cache():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis-–∫—ç—à—É."""
    global redis_connection
    if redis_connection:
        try:
            await redis_connection.close()
            logger.info("üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis CACHE –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis-–∫—ç—à–∞: {e}")
